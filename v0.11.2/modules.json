{"menu":[{"text":"bundle","as":"bundle"},{"text":"config","items":[{"text":"Config","as":"config/Config"},{"text":"default","as":"config/default"}]},{"text":"constants","items":[{"text":"ACTIONS","as":"constants/ACTIONS"},{"text":"XDN_CONFIG_ENV_VARIABLE","as":"constants/XDN_CONFIG_ENV_VARIABLE"},{"text":"XDN_CONFIG_FILE","as":"constants/XDN_CONFIG_FILE"},{"text":"XDN_DEPLOYMENT_TYPE_AWS","as":"constants/XDN_DEPLOYMENT_TYPE_AWS"},{"text":"XDN_DEPLOYMENT_TYPE_ENV_VARIABLE","as":"constants/XDN_DEPLOYMENT_TYPE_ENV_VARIABLE"}]},{"text":"createCustomCacheKey","items":[{"text":"CustomCacheKey","as":"createCustomCacheKey/CustomCacheKey"},{"text":"default","as":"createCustomCacheKey/default"}]},{"text":"environment","items":[{"text":"isCloud","as":"environment/isCloud"},{"text":"isProductionBuild","as":"environment/isProductionBuild"}]},{"items":[{"text":"PluginBase","as":"plugins/PluginBase"}],"text":"plugins"},{"text":"Proxy","as":"Proxy"},{"items":[{"text":"addPreloadHeaders","as":"response/addPreloadHeaders"},{"text":"EdgeResponseWriter","as":"response/EdgeResponseWriter"},{"text":"ResponseWriter","as":"response/ResponseWriter"},{"text":"stream","as":"response/stream"}],"text":"response"},{"text":"Route","as":"Route"},{"text":"RouteGroup","as":"RouteGroup"},{"text":"RouteGroupList","as":"RouteGroupList"},{"text":"Router","as":"Router"},{"items":[{"text":"bindParamsToPath","as":"utils/bindParamsToPath"},{"text":"convertParamsToBackReferences","as":"utils/convertParamsToBackReferences"},{"text":"createEdgeConfig","items":[{"text":"default","as":"utils/createEdgeConfig/default"},{"text":"EdgeConfig","as":"utils/createEdgeConfig/EdgeConfig"}]},{"text":"readBody","as":"utils/readBody"},{"text":"routeToRegex","as":"utils/routeToRegex"},{"text":"toVCLRegex","as":"utils/toVCLRegex"},{"text":"Validator","as":"utils/Validator"}],"text":"utils"}],"exports":{"Proxy":{"name":"Proxy","type":"class","async":false,"generator":false,"comments":"A container for a Proxy.","examples":[],"params":[{"name":"backendConfig"}],"returns":[],"import":"import Proxy from 'react-storefront/Proxy'","members":[{"name":"fetch","type":"function","async":true,"generator":false,"comments":"Sends a request using the proxy.","examples":[],"params":[{"name":"req","type":"Request","text":"The request being sent."},{"name":"res","type":"Response","text":"The response for the request."},{"name":"$2","default":"{}","type":"Object","properties":[{"name":"path"},{"name":"headers"}]}],"returns":[]}]},"Route":{"name":"Route","type":"class","async":false,"generator":false,"comments":"A container for a Route.","examples":[],"params":[{"name":"criteria","type":"object|string","text":"A string or an object with `path`, `headers`, and `method`."},{"name":"handler","type":"Function","text":"A route handler"}],"returns":[],"import":"import Route from 'react-storefront/Route'","members":[{"name":"match","type":"function","async":false,"generator":false,"comments":"Checks if rhe request matches this route.","examples":[],"params":[{"name":"req","type":"Request","text":"The request to check."}],"returns":[{"type":"Boolean|Object","text":"The passed params if the route matches the request's\nmethod, headers, cookies and path. Otherwise, returns `false`."}]},{"name":"toString","type":"function","async":false,"generator":false,"comments":"Gives a string representation of this route.","examples":[],"params":[],"returns":[{"type":"String","text":"String version of the route."}]}]},"RouteGroup":{"name":"RouteGroup","type":"class","async":false,"generator":false,"comments":"This class is needed for creating a route group that holds a routes that can\nbe dynamically updated on a local env.","examples":[],"params":[{"name":"name","type":"String","text":"Name of the route group - **required**"}],"returns":[],"import":"import RouteGroup from 'react-storefront/RouteGroup'","members":[{"name":"clear","type":"function","async":false,"generator":false,"comments":"Clears all routes in group.\nUsed for updating routes dynamically for development purpose.","examples":[],"params":[],"returns":[]},{"name":"length","type":"function","async":false,"generator":false,"comments":"Returns number of routes in group.","examples":[],"params":[],"returns":[{"type":"Number","text":"Number of routes in the group."}]},{"name":"match","type":"function","async":false,"generator":false,"comments":"Adds route to group.","examples":[],"params":[{"name":"criteria","type":"Object|String","text":"The criteria to match."},{"name":"handler","type":"Function","text":"The handler to use for the route."}],"returns":[]}]},"RouteGroupList":{"name":"RouteGroupList","type":"class","async":false,"generator":false,"comments":"Holds a list of route groups\nThis class is needed for querying route groups that is needed\nfor keeping the routes hierarchy while changing the routes in a group.\nFor example, updating next.js routes in local dev env.","examples":[],"params":[],"returns":[],"import":"import RouteGroupList from 'react-storefront/RouteGroupList'","members":[{"name":"add","type":"function","async":false,"generator":false,"comments":"Pushes route group to list.","examples":[],"params":[{"name":"group","type":"RouteGroup","text":"The route group."}],"returns":[{"type":"RouteGroupList","text":"A self-reference suitable for chaining."}]},{"name":"findByName","type":"function","async":false,"generator":false,"comments":"Returns route group by name.","examples":[],"params":[{"name":"name","type":"String","text":"The name of the route group to find."}],"returns":[{"type":"RouteGroup","text":"The route group with the given name, or `null` if not found."}]},{"name":"getGroups","type":"function","async":false,"generator":false,"comments":"Returns all route groups.","examples":[],"params":[],"returns":[{"type":"RouteGroup","extendedType":"Array","text":"A list of all the route groups."}]},{"name":"getRoutes","type":"function","async":false,"generator":false,"comments":"Returns all registered routes in all groups.","examples":[],"params":[],"returns":[{"type":"Route","extendedType":"Array","text":"List of registered routes."}]},{"name":"length","type":"function","async":false,"generator":false,"comments":"Returns the length of route groups list.","examples":[],"params":[],"returns":[{"type":"Number","text":"The number of route groups in the list."}]}]},"Router":{"name":"Router","type":"class","async":false,"generator":false,"comments":"A router.","examples":[],"params":[],"returns":[],"import":"import Router from 'react-storefront/Router'","members":[{"name":"createEdgeConfig","type":"function","async":false,"generator":false,"comments":"Returns edge config from current router","examples":[],"params":[],"returns":[]},{"name":"destination","type":"function","async":false,"generator":false,"comments":"Adds a named destination to which you can map traffic using the traffic shaping settings in your environment\nin the XDN developer console","examples":[],"params":[{"name":"name","type":"String","text":"The name of the destination"},{"name":"router","type":"Router","text":"A router to use when handling requests"}],"returns":[{"type":"Router","text":"A self-reference, suitable for chaining."}]},{"name":"fallback","type":"function","async":false,"generator":false,"comments":"Adds a route that matches all requests","examples":[],"params":[{"name":"handler","type":"Function","text":"A function that accepts a `WrappedResponse`, `Request`, and `params` object."}],"returns":[{"type":"Router","text":"A self-reference, suitable for chaining."}]},{"name":"group","type":"function","async":false,"generator":false,"comments":"Adds a [`RouteGroup`](/apiReference/RouteGroup) to router and calls route register\nfunction for group.","examples":[],"params":[{"name":"name","type":"String","text":"Group name"},{"name":"registerRoutesFn","type":"Function","text":"Group route register function"}],"returns":[{"type":"Router","text":"A self-reference, suitable for chaining."}]},{"name":"match","type":"function","async":false,"generator":false,"comments":"Adds a route.","examples":[],"params":[{"name":"criteria","type":"String|Object","text":"Either the path as a string or an object with `path`, `method`, and `headers`."},{"name":"handler","type":"Function","text":"A function that accepts a `WrappedResponse`, `Request`, and `params` object."}],"returns":[{"type":"Router","text":"A self-reference, suitable for chaining."}]},{"name":"run","type":"function","async":false,"generator":false,"comments":"Finds the matched route and calls its handler","examples":[],"params":[{"name":"req","type":"Request","text":"The request"},{"name":"res","type":"Response","text":"The response"}],"returns":[]},{"name":"setDefaultBackend","type":"function","async":false,"generator":false,"comments":"Sets the default backend to use when `proxy` is used without an argument","examples":[],"params":[{"name":"backend","type":"String"}],"returns":[]},{"name":"use","type":"function","async":false,"generator":false,"comments":"Constructs plugin and pushes it to registered plugins","examples":[],"params":[{"name":"pluginInstance","type":"Class","text":"A plugin to use."}],"returns":[{"type":"Router","text":"A self-reference, suitable for chaining."}]}]},"bundle":{"name":"bundle","type":"function","async":false,"generator":false,"comments":"Bundles the project's `routes.js` file so it can be uploaded to Lambda.","examples":[],"params":[{"name":"appDir","type":"String","text":"Directory containing the application"},{"name":"destDir","type":"String","text":"Destination directory for the output bundle"},{"name":"filename","type":"String","text":"File name to use for the output bundle"}],"returns":[],"import":"import bundle from 'react-storefront/bundle'"},"config/Config":{"name":"Config","type":"class","async":false,"generator":false,"comments":"An object containing the config settings. This class is internal, but an instance\ncan be obtained using\n```js\nimport Config from 'xdn-router/config'\n```","examples":[],"params":[],"returns":[],"members":[{"name":"get","type":"function","async":false,"generator":false,"comments":"Get configuration by key","examples":[],"params":[{"name":"key","type":"String","text":"The key to grab from the config."}],"returns":[]},{"name":"has","type":"function","async":false,"generator":false,"comments":"Test if key exists in config","examples":[],"params":[{"name":"key","type":"String","text":"The key to test."}],"returns":[]},{"name":"loadXdnConfig","type":"function","async":false,"generator":false,"comments":"Loads XDN config and sets the current configuration.","examples":[],"params":[],"returns":[]}]},"config/default":{"name":"config","async":false,"generator":false,"comments":"Create an instance of [`Config`](/apiReference/config/Config) containing the XDN\nconfig settings.","examples":[],"params":[],"returns":[],"import":"import config from 'react-storefront/config'"},"constants/XDN_CONFIG_FILE":{"name":"XDN_CONFIG_FILE","type":"string","async":false,"generator":false,"comments":"XDN configuration file name.","examples":[],"params":[],"returns":[],"import":"import { XDN_CONFIG_FILE } from 'react-storefront/constants'"},"constants/XDN_CONFIG_ENV_VARIABLE":{"name":"XDN_CONFIG_ENV_VARIABLE","type":"string","async":false,"generator":false,"comments":"XDN configuration environment variable key.","examples":[],"params":[],"returns":[],"import":"import { XDN_CONFIG_ENV_VARIABLE } from 'react-storefront/constants'"},"constants/XDN_DEPLOYMENT_TYPE_ENV_VARIABLE":{"name":"XDN_DEPLOYMENT_TYPE_ENV_VARIABLE","type":"string","async":false,"generator":false,"comments":"Indicates whether code is running locally or in the cloud.","examples":[],"params":[],"returns":[],"import":"import { XDN_DEPLOYMENT_TYPE_ENV_VARIABLE } from 'react-storefront/constants'"},"constants/XDN_DEPLOYMENT_TYPE_AWS":{"name":"XDN_DEPLOYMENT_TYPE_AWS","type":"string","async":false,"generator":false,"comments":"Indicates that code is running in AWS.","examples":[],"params":[],"returns":[],"import":"import { XDN_DEPLOYMENT_TYPE_AWS } from 'react-storefront/constants'"},"constants/ACTIONS":{"name":"ACTIONS","type":"constant","async":false,"generator":false,"comments":"OEM configuration actions","examples":[],"params":[],"returns":[],"import":"import { ACTIONS } from 'react-storefront/constants'"},"constants/undefined":{"async":false,"generator":false,"comments":"The backend for cloud functions","examples":[],"params":[],"returns":[],"import":"import { undefined } from 'react-storefront/constants'"},"createCustomCacheKey/CustomCacheKey":{"name":"CustomCacheKey","type":"class","async":false,"generator":false,"comments":"Representation of a custom cache key. This is an internal class, but can be\ninstantiated using [`createCustomCacheKey`](/apiReference/createCustomCacheKey/default).\n```js\nimport createCustomCacheKey from 'xdn-router/createCustomCacheKey'\n```","examples":[],"params":[],"returns":[],"members":[{"name":"addCookie","type":"function","async":false,"generator":false,"comments":"Adds a cookie to the key.","examples":[],"params":[{"name":"name","type":"String","text":"The name of the cookie"},{"name":"createGroups","type":"Function","text":"A function used to create groups based on\nthe cookie."}],"returns":[{"type":"CustomCacheKey","text":"A self-reference, suitable for chaining."}]},{"name":"addHeader","type":"function","async":false,"generator":false,"comments":"Adds a header to the key.","examples":[],"params":[{"name":"name","type":"String","text":"The name of the header"},{"name":"createGroups","type":"Function","text":"A function used to create groups based on\nthe header."}],"returns":[{"type":"CustomCacheKey","text":"A self-reference, suitable for chaining."}]},{"name":"excludeAllQueryParameters","type":"function","async":false,"generator":false,"comments":"Set the key to exclude all query parameters, except for the provided names.","examples":[],"params":[],"returns":[{"type":"CustomCacheKey","text":"A self-reference, suitable for chaining."}]},{"name":"excludeAllQueryParametersExcept","type":"function","async":false,"generator":false,"comments":"Set the key to exclude all query parameters, except for the provided names.","examples":[],"params":[{"name":"names","type":"String","extendedType":"Array","text":"A list of parameters to not exclude."}],"returns":[{"type":"CustomCacheKey","text":"A self-reference, suitable for chaining."}]},{"name":"excludeQueryParameters","type":"function","async":false,"generator":false,"comments":"Set the key to exclude a certain list of query parameters.","examples":[],"params":[{"name":"names","type":"String","extendedType":"Array","text":"A list of parameters to exclude."}],"returns":[{"type":"CustomCacheKey","text":"A self-reference, suitable for chaining."}]},{"name":"toJSON","type":"function","async":false,"generator":false,"comments":"","examples":[],"params":[],"returns":[{"type":"Object","text":"An object representation of this key."}]}]},"createCustomCacheKey/default":{"name":"createCustomCacheKey","type":"function","async":false,"generator":false,"comments":"Returns a [`CustomCacheKey`](/apiReference/createCustomCacheKey/CustomCacheKey) for creating\ncustom server cache keys based on cookies, query parameters, and request headers.\n\nExample:\n\n```js\n new Router()\n   .get('/s/:id',\n     cache({\n       edge: {\n         key: createCustomCacheKey()\n           .addHeader('user-agent')\n           .excludeQueryParameters(['uid'])\n           .addCookie('location', cookie => {\n             cookie.group('na').byPattern('us|ca')\n             cookie.group('eur').byPattern('de|fr|ee')\n           })\n       }\n     })\n   )\n```","examples":[],"params":[],"returns":[{"type":"CustomCacheKey","text":"The generated cache key."}],"import":"import createCustomCacheKey from 'react-storefront/createCustomCacheKey'"},"environment/isCloud":{"name":"isCloud","type":"function","async":false,"generator":false,"comments":"Used to determine if the app is running in the cloud.","examples":[],"params":[],"returns":[{"type":"Boolean","text":"`true` when running in the cloud, `false` otherwise"}],"import":"import { isCloud } from 'react-storefront/environment'"},"environment/isProductionBuild":{"name":"isProductionBuild","type":"function","async":false,"generator":false,"comments":"Used to determine if the app is running on a production build.","examples":[],"params":[],"returns":[{"type":"Boolean","text":"`true` when running a production build, either locally or in the cloud; `false` otherwise"}],"import":"import { isProductionBuild } from 'react-storefront/environment'"},"plugins/PluginBase":{"name":"PluginBase","type":"class","async":false,"generator":false,"comments":"Base class for a router plugin.","examples":[],"params":[],"returns":[],"import":"import PluginBase from 'react-storefront/plugins/PluginBase'","members":[{"name":"onRegister","type":"function","async":false,"generator":false,"comments":"Called when plugin is registered","examples":[],"params":[{"name":"router","type":"Router","text":"The router object to which the plugin was added."}],"returns":[]},{"name":"onRequest","type":"function","async":false,"generator":false,"comments":"Called when [`router.run`](/apiReference/Router#member-run) receives a request.","examples":[],"params":[{"name":"req","type":"Request","text":"The request object"}],"returns":[]}]},"response/EdgeResponseWriter":{"name":"EdgeResponseWriter","type":"class","async":false,"generator":false,"comments":"A substitute implementation of `ResponseWriter` that creates the contents of `xdn.json`, which\nis used to generate the VCL for Fastly.","examples":[],"params":[{"name":"req","type":"Request","text":"The `HttpRequest` object"},{"name":"res","type":"Response","text":"The `HttpResponse` object"},{"name":"route","type":"Route","text":"The route being hit"},{"name":"defaultBackend","type":"String","text":"The default backend for proxy when none is provided"}],"returns":[],"import":"import EdgeResponseWriter from 'react-storefront/response/EdgeResponseWriter'","members":[{"name":"cache","type":"function","async":false,"generator":false,"comments":"Creates the edge cache config","examples":[],"params":[{"name":"config","type":"Object"}],"returns":[]},{"name":"proxy","type":"function","async":false,"generator":false,"comments":"Proxies from the edge","examples":[],"params":[{"name":"backend","type":"String"},{"name":"config","default":"{}","type":"Object","properties":[{"name":"path","type":"String"}]}],"returns":[]},{"name":"redirect","type":"function","async":false,"generator":false,"comments":"Sends a redirect from the edge","examples":[],"params":[{"name":"to","type":"String","text":"The destination URL"},{"name":"statusCode","default":"302","type":"Number","text":"The http response status."}],"returns":[]},{"name":"render","type":"member","async":false,"generator":false,"comments":"Passes request and response to the specified callback, which should\nhandle rendering the response as a string","examples":[],"params":[],"returns":[]},{"name":"send","type":"function","async":false,"generator":false,"comments":"Sends string content back to client","examples":[],"params":[{"name":"content","type":"String"},{"name":"statusCode","default":"200","type":"Number"}],"returns":[]},{"name":"serveStatic","type":"function","async":false,"generator":false,"comments":"Serve static","examples":[],"params":[{"name":"path","type":"String","text":"The request path"}],"returns":[]}]},"response/ResponseWriter":{"name":"ResponseWriter","type":"class","async":false,"generator":false,"comments":"The API that is passed to route callbacks.","examples":[],"params":[{"name":"req","type":"HttpRequest","text":"The request"},{"name":"res","type":"HttpResponse","text":"The response"},{"name":"route","type":"Route","text":"The route"},{"name":"defaultBackend","type":"String","text":"The default backend for proxy when none is provided"}],"returns":[],"import":"import ResponseWriter from 'react-storefront/response/ResponseWriter'","members":[{"name":"cache","type":"function","async":false,"generator":false,"comments":"Provides cache keys for http response","examples":[],"params":[{"name":"$0","type":"Object","properties":[{"name":"browser"},{"name":"edge"}]}],"returns":[]},{"name":"onRouteError","type":"function","async":false,"generator":false,"comments":"Send json error response to client","examples":[],"params":[{"name":"err","type":"Error"}],"returns":[]},{"name":"proxy","type":"function","async":false,"generator":false,"comments":"Proxy current request","examples":[],"params":[{"name":"backend","type":"String","text":"The name of the backend to connect to"},{"name":"options","type":"Object","text":"Options for proxyHost"}],"returns":[]},{"name":"proxyHost","type":"function","async":false,"generator":false,"comments":"Proxies the response from a given host","examples":[],"params":[{"name":"backendConfig","type":"Object/String","text":"The backend config or just a hostname"},{"name":"options","default":"{}","type":"Object","properties":[{"name":"path","type":"Object","text":"A path to use instead of the path from the request"},{"name":"headers","type":"Object","text":"Additional headers to add to the upstream request"},{"name":"transformResponse","type":"Object","text":"A function that transforms the downstream response"}]}],"returns":[]},{"name":"redirect","type":"function","async":false,"generator":false,"comments":"Send redirect response","examples":[],"params":[{"name":"to","type":"String"},{"name":"statusCode","default":"302","type":"Number"}],"returns":[]},{"name":"removeRequestHeader","type":"function","async":false,"generator":false,"comments":"Remove request header","examples":[],"params":[{"name":"name","type":"String"}],"returns":[]},{"name":"removeResponseHeader","type":"function","async":false,"generator":false,"comments":"Remove header","examples":[],"params":[{"name":"name","type":"String"}],"returns":[]},{"name":"render","type":"function","async":false,"generator":false,"comments":"Call render callback","examples":[],"params":[{"name":"cb","type":"Function","text":"Render callback function"}],"returns":[]},{"name":"send","type":"function","async":false,"generator":false,"comments":"Sends content back to client","examples":[],"params":[{"name":"content","type":"String"},{"name":"statusCode","default":"200","type":"Number"}],"returns":[]},{"name":"serveStatic","type":"function","async":false,"generator":false,"comments":"Responds with a static asset from the specified path","examples":[],"params":[{"name":"path","type":"String","text":"A file path"}],"returns":[]},{"name":"setRequestHeader","type":"function","async":false,"generator":false,"comments":"Sets request header","examples":[],"params":[{"name":"name","type":"String","text":"header key"},{"name":"value","type":"String","text":"header value"}],"returns":[]},{"name":"setResponseHeader","type":"function","async":false,"generator":false,"comments":"Set response headers","examples":[],"params":[{"name":"name","type":"String"},{"name":"value","type":"String"}],"returns":[]},{"name":"updateRequestHeader","type":"function","async":false,"generator":false,"comments":"Sets request header","examples":[],"params":[{"name":"name","type":"String","text":"header key"},{"name":"match"},{"name":"replace"},{"name":"value","type":"String","text":"header value"}],"returns":[]},{"name":"updateResponseHeader","type":"function","async":false,"generator":false,"comments":"Updates response header","examples":[],"params":[{"name":"name","type":"String","text":"Header name"},{"name":"match","type":"String","text":"Regex to match the part"},{"name":"replace","type":"String","text":"Value to update matched part with"}],"returns":[]}]},"response/addPreloadHeaders":{"name":"addPreloadHeaders","type":"function","async":false,"generator":false,"comments":"Adds preload headers for all `<link rel=\"preload\">` tags on the response.body","examples":[],"params":[{"name":"res","type":"Response","text":"The response to which headers should be added."}],"returns":[],"import":"import addPreloadHeaders from 'react-storefront/response/addPreloadHeaders'"},"response/stream":{"name":"stream","type":"function","async":false,"generator":false,"comments":"Proxies the request to the specified backend as a stream.  This can be used for event streams\nfor hot module reloading.","examples":[],"params":[{"name":"req","type":"Request","text":"The downstream request"},{"name":"res","type":"Response","text":"The downstream response"},{"name":"backendConfig","type":"Object","text":"The backend config from `xdn.config.js`"},{"name":"errorHandler","default":"Function.prototype","type":"Function","text":"A function to call when an error occurs"}],"returns":[],"import":"import stream from 'react-storefront/response/stream'"},"utils/Validator":{"name":"Validator","type":"class","async":false,"generator":false,"comments":"An object used to validate an xdn config.\n\nExample:\n```js\nValidator.validateXdnFileConfiguration(config)\n```","examples":[],"params":[],"returns":[],"import":"import Validator from 'react-storefront/utils/Validator'","members":[{"name":"static validateXdnFileConfiguration","type":"function","async":false,"generator":false,"comments":"Validates `xdn.config.js`. If the config is validated, it is returned; otherwise,\nan error is thrown.","examples":[],"params":[{"name":"config","type":"EdgeConfig","text":"Loaded xdn configuration"}],"returns":[{"type":"EdgeConfig","text":"The validated config"}],"import":"import { static validateXdnFileConfiguration } from 'react-storefront/undefined'"}]},"utils/bindParamsToPath":{"name":"bindParamsToPath","type":"function","async":false,"generator":false,"comments":"Binds params to path.\n\nExample:\n```js\nbindParamsToPath('/{param1}/{param2}', { param1: 'p1', param2: 'p2' })\n```\nOutput: `/p1/p2`","examples":[],"params":[{"name":"path","type":"String","text":"The path, with param substitutions in braces `{}`."},{"name":"params","type":"Object","text":"An object with keys matching the params in braces."}],"returns":[{"type":"String","text":"A string with the params substituted with their values."}],"import":"import bindParamsToPath from 'react-storefront/utils/bindParamsToPath'"},"utils/convertParamsToBackReferences":{"name":"convertParamsToBackReferences","type":"function","async":false,"generator":false,"comments":"Replaces named parameters in the specified path with back references so\nthat the edge can create a path using the matched params with a regex replace in VCL.","examples":[],"params":[{"name":"matcher","type":"Route","text":"A route-parser route"},{"name":"path","type":"String","text":"The request path"}],"returns":[{"type":"String","text":"A path with params replaced by back references"}],"import":"import convertParamsToBackReferences from 'react-storefront/utils/convertParamsToBackReferences'"},"utils/createEdgeConfig/EdgeConfig":{"name":"EdgeConfig","type":"class","async":false,"generator":false,"comments":"A configuration object for the Edge. Can be instantiated using\n[`createEdgeConfig`](/apiReference/utils/createEdgeConfig/default).\n```js\nimport createEdgeConfig from 'xdn-router/utils/createEdgeConfig'\n```","examples":[],"params":[],"returns":[],"members":[{"name":"backends","type":"Object","async":false,"generator":false,"comments":"A map of backends.","examples":[],"params":[],"returns":[]},{"name":"destinations","type":"Object","async":false,"generator":false,"comments":"A map of route paths to destination routes.","examples":[],"params":[],"returns":[]}]},"utils/createEdgeConfig/default":{"name":"createEdgeConfig","type":"function","async":false,"generator":false,"comments":"Creates an outer edge manager config ([`EdgeConfig`](/apiReference/utils/createEdgeConfig/EdgeConfig))\nfor the specified router by iterating through each route and calling it with a mock request\nand response.","examples":[],"params":[{"name":"router","type":"Router"}],"returns":[{"type":"EdgeConfig","text":"An object containing the Edge config"}],"import":"import createEdgeConfig from 'react-storefront/utils/createEdgeConfig'"},"utils/readBody":{"name":"readBody","type":"function","async":false,"generator":false,"comments":"Reads the request body and adds it to `request.body`.","examples":[],"params":[{"name":"req","type":"ClientRequest","text":"The request"}],"returns":[{"type":"Promise","text":"The streamable request Promise"}],"import":"import readBody from 'react-storefront/utils/readBody'"},"utils/routeToRegex":{"name":"routeToRegex","type":"function","async":false,"generator":false,"comments":"Returns a regex version of a route.","examples":[],"params":[{"name":"route","type":"String","text":"The route."}],"returns":[{"type":"String","text":"A regex representation of the route."}],"import":"import routeToRegex from 'react-storefront/utils/routeToRegex'"},"utils/toVCLRegex":{"name":"toVCLRegex","type":"function","async":false,"generator":false,"comments":"Converts a JavaScript Regexp instance to a string compatible with Fastly VCL.\nSee https://docs.fastly.com/en/guides/vcl-regular-expression-cheat-sheet","examples":[],"params":[{"name":"regex","text":"The regex to convert."}],"returns":[{"type":"String","text":"A string representing the given regex that is compatible with Fastly VCL."}],"import":"import toVCLRegex from 'react-storefront/utils/toVCLRegex'"}}}
